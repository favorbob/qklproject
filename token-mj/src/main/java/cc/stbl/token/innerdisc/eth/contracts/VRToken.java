package cc.stbl.token.innerdisc.eth.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class VRToken extends Contract {
    private static final String BINARY = "0x60806040526000600660006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162005aae38038062005aae83398101806040528101908080518201929190602001805182019291906020018051906020019092919050505060016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550601260ff16600a0a81026004819055508260079080519060200190620000e79291906200019f565b508160089080519060200190620001009291906200019f565b50600454600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600454600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506004546009819055505050506200024e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001e257805160ff191683800117855562000213565b8280016001018555821562000213579182015b8281111562000212578251825591602001919060010190620001f5565b5b50905062000222919062000226565b5090565b6200024b91905b80821115620002475760008160009055506001016200022d565b5090565b90565b615850806200025e6000396000f3006080604052600436106101ac576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305c3d2de146101b157806305d2035b1461025c57806306fdde031461028b578063071f6ed11461031b5780630744f955146103e65780630785c57514610491578063080b4fcc14610546578063164bc2d2146105a15780631d777df31461064c578063236cb57714610717578063313ce567146107cc57806331dd83c2146107fd578063429b9ac1146108545780634b0ee02a146108ff5780634e2131791461095657806353537cf914610a0b57806353c9528314610a665780635935573614610b1b57806360feb00314610b7257806370a0823114610c31578063729ff5b314610c8857806379f26ad814610d535780637d64bcb414610dfe57806395d89b4114610e2d57806396cf610114610ebd578063a6c703f914610f88578063b38b9e3e14610fdf578063b955dd641461108a578063bab36ef014611155578063babcc53914611220578063c01b11ae1461127b578063d3fc986414611346578063e51579f3146113f1578063e889b470146114b0575b600080fd5b3480156101bd57600080fd5b50610242600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506114db565b604051808215151515815260200191505060405180910390f35b34801561026857600080fd5b50610271611752565b604051808215151515815260200191505060405180910390f35b34801561029757600080fd5b506102a0611765565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102e05780820151818401526020810190506102c5565b50505050905090810190601f16801561030d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561032757600080fd5b506103cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611803565b604051808215151515815260200191505060405180910390f35b3480156103f257600080fd5b50610477600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611b47565b604051808215151515815260200191505060405180910390f35b34801561049d57600080fd5b5061052c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e82565b604051808215151515815260200191505060405180910390f35b34801561055257600080fd5b50610587600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061217f565b604051808215151515815260200191505060405180910390f35b3480156105ad57600080fd5b50610632600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506122a9565b604051808215151515815260200191505060405180910390f35b34801561065857600080fd5b506106fd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506125ad565b604051808215151515815260200191505060405180910390f35b34801561072357600080fd5b506107b2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612883565b604051808215151515815260200191505060405180910390f35b3480156107d857600080fd5b506107e1612b41565b604051808260ff1660ff16815260200191505060405180910390f35b34801561080957600080fd5b5061083e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b46565b6040518082815260200191505060405180910390f35b34801561086057600080fd5b506108e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612b8f565b604051808215151515815260200191505060405180910390f35b34801561090b57600080fd5b50610940600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612e5c565b6040518082815260200191505060405180910390f35b34801561096257600080fd5b506109f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612f47565b604051808215151515815260200191505060405180910390f35b348015610a1757600080fd5b50610a4c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613204565b604051808215151515815260200191505060405180910390f35b348015610a7257600080fd5b50610b01600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061332e565b604051808215151515815260200191505060405180910390f35b348015610b2757600080fd5b50610b5c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506136c4565b6040518082815260200191505060405180910390f35b348015610b7e57600080fd5b50610c17600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061370d565b604051808215151515815260200191505060405180910390f35b348015610c3d57600080fd5b50610c72600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613ad8565b6040518082815260200191505060405180910390f35b348015610c9457600080fd5b50610d39600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613b21565b604051808215151515815260200191505060405180910390f35b348015610d5f57600080fd5b50610de4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613e2e565b604051808215151515815260200191505060405180910390f35b348015610e0a57600080fd5b50610e136140fb565b604051808215151515815260200191505060405180910390f35b348015610e3957600080fd5b50610e426141c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e82578082015181840152602081019050610e67565b50505050905090810190601f168015610eaf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ec957600080fd5b50610f6e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614263565b604051808215151515815260200191505060405180910390f35b348015610f9457600080fd5b50610fc9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506145b6565b6040518082815260200191505060405180910390f35b348015610feb57600080fd5b50611070600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506145ff565b604051808215151515815260200191505060405180910390f35b34801561109657600080fd5b5061113b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506148e4565b604051808215151515815260200191505060405180910390f35b34801561116157600080fd5b50611206600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614c28565b604051808215151515815260200191505060405180910390f35b34801561122c57600080fd5b50611261600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614f7b565b604051808215151515815260200191505060405180910390f35b34801561128757600080fd5b5061132c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050614fd0565b604051808215151515815260200191505060405180910390f35b34801561135257600080fd5b506113d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506152a6565b604051808215151515815260200191505060405180910390f35b3480156113fd57600080fd5b50611496600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050615498565b604051808215151515815260200191505060405180910390f35b3480156114bc57600080fd5b506114c5615791565b6040518082815260200191505060405180910390f35b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561152b57600080fd5b61157d83600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161283600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f62b8d74cd081583005f50d57dad625f34aff6ae279f8bf1f3ed97b7243139f93856116ae33612b46565b6116b789612b46565b876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561170a5780820151818401526020810190506116ef565b50505050905090810190601f1680156117375780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3600190509392505050565b600660009054906101000a900460ff1681565b60078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117fb5780601f106117d0576101008083540402835291602001916117fb565b820191906000526020600020905b8154815290600101906020018083116117de57829003601f168201915b505050505081565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561186357600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483111515156118b157600080fd5b61190383600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061199883600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fa3bc3273ca2de44ad4b67480bb8f8133e81730710f122d804a90df61501fce0485600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611afe578082015181840152602081019050611ae3565b50505050905090810190601f168015611b2b5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611ba757600080fd5b600083111515611bb657600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515611c0457600080fd5b611c5683600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611ceb83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f414b84f4a5d53317b74c11e4f5544c3d45e44b32f96ea41b0070bbc8a4093f4c84600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611e3a578082015181840152602081019050611e1f565b50505050905090810190601f168015611e675780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a2600190509392505050565b600080600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611ee357600080fd5b84600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611f3157600080fd5b611f4485856157ce90919063ffffffff16565b9050611f9885600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061202d81600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167fb5c48a9d42b09595c395c31495de95a9eed28cef69d9cc03ef2901e0ff10261486600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561213657808201518184015260208101905061211b565b50505050905090810190601f1680156121635780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a26001915050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156121df57600080fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f90241da86ce0548720ee059f697d9e43561a58a98a518de2363ea814f3319a096000604051808215151515815260200191505060405180910390a360019050919050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561230957600080fd5b60008311151561231857600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561236657600080fd5b6123b883600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061244d83600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f552fa776847407068cda602854291aa80b16bf35e389ed0ea293583f0d510325846124d2876136c4565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054866040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561256557808201518184015260208101905061254a565b50505050905090810190601f1680156125925780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a2600190509392505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561260d57600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561265b57600080fd5b6126ad83600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061274283600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f528424e65c56d2c7ee871297beb1eadf473b7aacebf3a611e60f5843badd09c5856127de89613ad8565b6127e789613ad8565b876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561283a57808201518184015260208101905061281f565b50505050905090810190601f1680156128675780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b600080600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156128e457600080fd5b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054851115151561293257600080fd5b61294585856157ce90919063ffffffff16565b905061299985600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a2e81600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167fa4df36e7d068c715f5e7c515674173e3e34f1a33e93ca08ef5f583fdb97b7db58683866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612af8578082015181840152602081019050612add565b50505050905090810190601f168015612b255780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a26001915050949350505050565b601281565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612bef57600080fd5b600083111515612bfe57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515612c4c57600080fd5b612c9e83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612d3383600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f6d908ca800b72afe3fb765a2bb41c2ea73baa6e20ad8b325e5934fb1657c6ca384612db8876136c4565b612dc188613ad8565b866040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612e14578082015181840152602081019050612df9565b50505050905090810190601f168015612e415780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a2600190509392505050565b6000612f40600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f32600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b6157b090919063ffffffff16565b9050919050565b600080600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515612fa857600080fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548511151515612ff657600080fd5b61300985856157ce90919063ffffffff16565b905061305d85600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506130f281600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167e97228a3516a8f96d6537c6fbec09673b077def3e54f4ab1ff33a73575f78e48683866040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156131bb5780820151818401526020810190506131a0565b50505050905090810190601f1680156131e85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a26001915050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561326457600080fd5b60016000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f90241da86ce0548720ee059f697d9e43561a58a98a518de2363ea814f3319a096001604051808215151515815260200191505060405180910390a360019050919050565b6000806000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561339157600080fd5b85600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156133df57600080fd5b61343186600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061349a600a61348c87896157ce90919063ffffffff16565b61580990919063ffffffff16565b91506134af828761579790919063ffffffff16565b905061350382600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061359881600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508673ffffffffffffffffffffffffffffffffffffffff167f4b31fa994cb28100697eb5153c58cc13b72564eff72d5e7364a4ccedf2f48da887838561361f8c6145b6565b896040518086815260200185815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561367857808201518184015260208101905061365d565b50505050905090810190601f1680156136a55780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a2600192505050949350505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561376d57600080fd5b84600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101515156137bb57600080fd5b61380d85600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506138a283600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061393784600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff167fa694d2aab2ec9cc3917c624607e6d5067c27b88e377ecfe7a7027b63d17ae8aa600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a3b8a6145b6565b866040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a8e578082015181840152602081019050613a73565b50505050905090810190601f168015613abb5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a26001905095945050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515613b8157600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515613bcf57600080fd5b613c2183600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613cb683600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fbab8f2b07b6a828fc960f65902121c73acdf0be6d2edb2f5e7f6cef4cc6dd5d985613d5289612b46565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613de5578082015181840152602081019050613dca565b50505050905090810190601f168015613e125780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515613e8e57600080fd5b600083111515613e9d57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515613eeb57600080fd5b613f3d83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613fd283600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f5ffa7037b2c45d2741acd26b191f8d4934e97947f84013deb28a82b1c756c88d8461405787613ad8565b614060886136c4565b866040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156140b3578082015181840152602081019050614098565b50505050905090810190601f1680156140e05780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a2600190509392505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561415b57600080fd5b600660009054906101000a900460ff1615151561417757600080fd5b6001600660006101000a81548160ff0219169083151502179055507fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0860405160405180910390a16001905090565b60088054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561425b5780601f106142305761010080835404028352916020019161425b565b820191906000526020600020905b81548152906001019060200180831161423e57829003601f168201915b505050505081565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156142c357600080fd5b6000831115156142d257600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561432057600080fd5b61437283600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061440783600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f64126e97fdee7dd2f45d9bcc8b67d4f35949b4e9861e690f6d76db959cf05c9885600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561456d578082015181840152602081019050614552565b50505050905090810190601f16801561459a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561464f57600080fd5b6146a183600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061473683600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f528424e65c56d2c7ee871297beb1eadf473b7aacebf3a611e60f5843badd09c585600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561489c578082015181840152602081019050614881565b50505050905090810190601f1680156148c95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a3600190509392505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561494457600080fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561499257600080fd5b6149e483600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614a7983600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f7d45745ed401e88c2e24ab20ea3fa21af6f2286bc2eaf0e2245eabbcf203760485600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614bdf578082015181840152602081019050614bc4565b50505050905090810190601f168015614c0c5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515614c8857600080fd5b600083111515614c9757600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548311151515614ce557600080fd5b614d3783600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614dcc83600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fd467dfc5fca8495e71ed811e991278cfec83128b6bf67826d4f34e495149d0a885600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614f32578082015181840152602081019050614f17565b50505050905090810190601f168015614f5f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561503057600080fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054831115151561507e57600080fd5b6150d083600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461579790919063ffffffff16565b600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061516583600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f62b8d74cd081583005f50d57dad625f34aff6ae279f8bf1f3ed97b7243139f938561520189612b46565b61520a89612b46565b876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561525d578082015181840152602081019050615242565b50505050905090810190601f16801561528a5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a360019050949350505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561530657600080fd5b600660009054906101000a900460ff1615151561532257600080fd5b615337836004546157b090919063ffffffff16565b60048190555061538f83600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546157b090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f85a66b9141978db9980f7e0ce3b468cebf4f7999f32b23091c5c03e798b1ba7a84846040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015615452578082015181840152602081019050615437565b50505050905090810190601f16801561547f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a2600190509392505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156154f857600080fd5b6000831015156155475782600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000851015156155965784600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6000841015156155e55783600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f87b7d691742feffa113bf3273879b1c7966848e99786b1f9dfa9b568ee07d673600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054876040518085815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561574757808201518184015260208101905061572c565b50505050905090810190601f1680156157745780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a36001905095945050505050565b60095481565b60008282111515156157a557fe5b818303905092915050565b60008082840190508381101515156157c457fe5b8091505092915050565b60008060008414156157e35760009150615802565b82840290508284828115156157f457fe5b041415156157fe57fe5b8091505b5092915050565b600080828481151561581757fe5b04905080915050929150505600a165627a7a723058201a3d1d2b97e60a331a0d3d533910439a09226740217263353a273128540d3ebc0029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
    }

    protected VRToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VRToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<MintFinishedEventResponse> getMintFinishedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<MintFinishedEventResponse> responses = new ArrayList<MintFinishedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintFinishedEventResponse> mintFinishedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("MintFinished", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintFinishedEventResponse>() {
            @Override
            public MintFinishedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                MintFinishedEventResponse typedResponse = new MintFinishedEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public List<IntegralAmplifyEventResponse> getIntegralAmplifyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IntegralAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<IntegralAmplifyEventResponse> responses = new ArrayList<IntegralAmplifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IntegralAmplifyEventResponse typedResponse = new IntegralAmplifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntegralAmplifyEventResponse> integralAmplifyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IntegralAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IntegralAmplifyEventResponse>() {
            @Override
            public IntegralAmplifyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                IntegralAmplifyEventResponse typedResponse = new IntegralAmplifyEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<IntegralLimitedAmplifyEventResponse> getIntegralLimitedAmplifyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IntegralLimitedAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<IntegralLimitedAmplifyEventResponse> responses = new ArrayList<IntegralLimitedAmplifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IntegralLimitedAmplifyEventResponse typedResponse = new IntegralLimitedAmplifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntegralLimitedAmplifyEventResponse> integralLimitedAmplifyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IntegralLimitedAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IntegralLimitedAmplifyEventResponse>() {
            @Override
            public IntegralLimitedAmplifyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                IntegralLimitedAmplifyEventResponse typedResponse = new IntegralLimitedAmplifyEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<IntegralRebateEventResponse> getIntegralRebateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IntegralRebate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<IntegralRebateEventResponse> responses = new ArrayList<IntegralRebateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IntegralRebateEventResponse typedResponse = new IntegralRebateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.limitedBalance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntegralRebateEventResponse> integralRebateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IntegralRebate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IntegralRebateEventResponse>() {
            @Override
            public IntegralRebateEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                IntegralRebateEventResponse typedResponse = new IntegralRebateEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.limitedBalance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public List<IntegralReturnEventResponse> getIntegralReturnEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IntegralReturn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<IntegralReturnEventResponse> responses = new ArrayList<IntegralReturnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IntegralReturnEventResponse typedResponse = new IntegralReturnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.aiicOf = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mjOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IntegralReturnEventResponse> integralReturnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IntegralReturn", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IntegralReturnEventResponse>() {
            @Override
            public IntegralReturnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                IntegralReturnEventResponse typedResponse = new IntegralReturnEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.aiicOf = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.mjOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ActiveUserEventResponse> getActiveUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ActiveUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ActiveUserEventResponse> responses = new ArrayList<ActiveUserEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ActiveUserEventResponse typedResponse = new ActiveUserEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.activeAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ActiveUserEventResponse> activeUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ActiveUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ActiveUserEventResponse>() {
            @Override
            public ActiveUserEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ActiveUserEventResponse typedResponse = new ActiveUserEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.activeAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.integralOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ResetAssetEventResponse> getResetAssetEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ResetAsset", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ResetAssetEventResponse> responses = new ArrayList<ResetAssetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResetAssetEventResponse typedResponse = new ResetAssetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.optAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAiic = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newMj = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newIntegral = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ResetAssetEventResponse> resetAssetEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ResetAsset", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ResetAssetEventResponse>() {
            @Override
            public ResetAssetEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ResetAssetEventResponse typedResponse = new ResetAssetEventResponse();
                typedResponse.log = log;
                typedResponse.optAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAiic = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newMj = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newIntegral = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferFromAmplifyEventResponse> getTransferFromAmplifyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TransferFromAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferFromAmplifyEventResponse> responses = new ArrayList<TransferFromAmplifyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferFromAmplifyEventResponse typedResponse = new TransferFromAmplifyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferFromAmplifyEventResponse> transferFromAmplifyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TransferFromAmplify", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferFromAmplifyEventResponse>() {
            @Override
            public TransferFromAmplifyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferFromAmplifyEventResponse typedResponse = new TransferFromAmplifyEventResponse();
                typedResponse.log = log;
                typedResponse.targetAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.integral = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferExtEventResponse> getTransferExtEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TransferExt", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferExtEventResponse> responses = new ArrayList<TransferExtEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferExtEventResponse typedResponse = new TransferExtEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferExtEventResponse> transferExtEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TransferExt", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferExtEventResponse>() {
            @Override
            public TransferExtEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferExtEventResponse typedResponse = new TransferExtEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.balanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<TradePlatformTransferEventResponse> getTradePlatformTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TradePlatformTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TradePlatformTransferEventResponse> responses = new ArrayList<TradePlatformTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradePlatformTransferEventResponse typedResponse = new TradePlatformTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TradePlatformTransferEventResponse> tradePlatformTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TradePlatformTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TradePlatformTransferEventResponse>() {
            @Override
            public TradePlatformTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TradePlatformTransferEventResponse typedResponse = new TradePlatformTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.balanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<TradePlatformTransferLimitEventResponse> getTradePlatformTransferLimitEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("TradePlatformTransferLimit", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TradePlatformTransferLimitEventResponse> responses = new ArrayList<TradePlatformTransferLimitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TradePlatformTransferLimitEventResponse typedResponse = new TradePlatformTransferLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.limitBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TradePlatformTransferLimitEventResponse> tradePlatformTransferLimitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("TradePlatformTransferLimit", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TradePlatformTransferLimitEventResponse>() {
            @Override
            public TradePlatformTransferLimitEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TradePlatformTransferLimitEventResponse typedResponse = new TradePlatformTransferLimitEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.limitBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LockedBalanceExtEventResponse> getLockedBalanceExtEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockedBalanceExt", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LockedBalanceExtEventResponse> responses = new ArrayList<LockedBalanceExtEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LockedBalanceExtEventResponse typedResponse = new LockedBalanceExtEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockedBalanceExtEventResponse> lockedBalanceExtEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockedBalanceExt", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockedBalanceExtEventResponse>() {
            @Override
            public LockedBalanceExtEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LockedBalanceExtEventResponse typedResponse = new LockedBalanceExtEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LockedTransferEventResponse> getLockedTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockedTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LockedTransferEventResponse> responses = new ArrayList<LockedTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LockedTransferEventResponse typedResponse = new LockedTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lockedBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockedTransferEventResponse> lockedTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockedTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockedTransferEventResponse>() {
            @Override
            public LockedTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LockedTransferEventResponse typedResponse = new LockedTransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lockedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.lockedBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LockedBalanceEventResponse> getLockedBalanceEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockedBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LockedBalanceEventResponse> responses = new ArrayList<LockedBalanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LockedBalanceEventResponse typedResponse = new LockedBalanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockedBalanceEventResponse> lockedBalanceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockedBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockedBalanceEventResponse>() {
            @Override
            public LockedBalanceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LockedBalanceEventResponse typedResponse = new LockedBalanceEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LockedLimitBalanceEventResponse> getLockedLimitBalanceEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LockedLimitBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LockedLimitBalanceEventResponse> responses = new ArrayList<LockedLimitBalanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LockedLimitBalanceEventResponse typedResponse = new LockedLimitBalanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.limitBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LockedLimitBalanceEventResponse> lockedLimitBalanceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LockedLimitBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LockedLimitBalanceEventResponse>() {
            @Override
            public LockedLimitBalanceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LockedLimitBalanceEventResponse typedResponse = new LockedLimitBalanceEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.limitBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnLockedBalanceEventResponse> getUnLockedBalanceEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnLockedBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnLockedBalanceEventResponse> responses = new ArrayList<UnLockedBalanceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnLockedBalanceEventResponse typedResponse = new UnLockedBalanceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnLockedBalanceEventResponse> unLockedBalanceEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnLockedBalance", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnLockedBalanceEventResponse>() {
            @Override
            public UnLockedBalanceEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnLockedBalanceEventResponse typedResponse = new UnLockedBalanceEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.balanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnLockedBalanceToLimitEventResponse> getUnLockedBalanceToLimitEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnLockedBalanceToLimit", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnLockedBalanceToLimitEventResponse> responses = new ArrayList<UnLockedBalanceToLimitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnLockedBalanceToLimitEventResponse typedResponse = new UnLockedBalanceToLimitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.limitBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnLockedBalanceToLimitEventResponse> unLockedBalanceToLimitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnLockedBalanceToLimit", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnLockedBalanceToLimitEventResponse>() {
            @Override
            public UnLockedBalanceToLimitEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnLockedBalanceToLimitEventResponse typedResponse = new UnLockedBalanceToLimitEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.lockedBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.limitBalanceOf = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LimitedTransferEventResponse> getLimitedTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LimitedTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LimitedTransferEventResponse> responses = new ArrayList<LimitedTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LimitedTransferEventResponse typedResponse = new LimitedTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.limitedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.limitedBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LimitedTransferEventResponse> limitedTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LimitedTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LimitedTransferEventResponse>() {
            @Override
            public LimitedTransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LimitedTransferEventResponse typedResponse = new LimitedTransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.limitedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.limitedBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<LimitedTransferLockEventResponse> getLimitedTransferLockEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LimitedTransferLock", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LimitedTransferLockEventResponse> responses = new ArrayList<LimitedTransferLockEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LimitedTransferLockEventResponse typedResponse = new LimitedTransferLockEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.limitedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.lockBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LimitedTransferLockEventResponse> limitedTransferLockEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LimitedTransferLock", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LimitedTransferLockEventResponse>() {
            @Override
            public LimitedTransferLockEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LimitedTransferLockEventResponse typedResponse = new LimitedTransferLockEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.limitedBalanceOfFrom = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.lockBalanceOfTo = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tradeNo = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<AllowedTransferredEventResponse> getAllowedTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AllowedTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AllowedTransferredEventResponse> responses = new ArrayList<AllowedTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AllowedTransferredEventResponse typedResponse = new AllowedTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.allow = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AllowedTransferredEventResponse> allowedTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AllowedTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AllowedTransferredEventResponse>() {
            @Override
            public AllowedTransferredEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AllowedTransferredEventResponse typedResponse = new AllowedTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.allow = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> limitedTransfer(String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "limitedTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> mintingFinished() {
        final Function function = new Function("mintingFinished", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> tradePlatformTransferLimit(String _from, String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "tradePlatformTransferLimit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockLimitBalanceFrom(String _owner, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "lockLimitBalanceFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> activeUser(String _owner, BigInteger amount, BigInteger beisu, String tradeNo) {
        final Function function = new Function(
                "activeUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(beisu), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAllow(String _address) {
        final Function function = new Function(
                "removeAllow", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unLockBalanceToLimit(String _owner, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "unLockBalanceToLimit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFromExt(String _from, String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "transferFromExt", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> integralLimitedAmplifyOf(String owner, BigInteger amount, BigInteger amplifyRatio, String tradeNo) {
        final Function function = new Function(
                "integralLimitedAmplifyOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(amplifyRatio), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> limitedBalanceOf(String owner) {
        final Function function = new Function("limitedBalanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> unLockBalance(String _owner, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "unLockBalance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalBalanceOf(String _owner) {
        final Function function = new Function("totalBalanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> integralAmplifyOf(String owner, BigInteger amount, BigInteger amplifyRatio, String tradeNo) {
        final Function function = new Function(
                "integralAmplifyOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(amplifyRatio), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAllow(String _address) {
        final Function function = new Function(
                "addAllow", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> integralRebate(String owner, BigInteger integral, BigInteger rate, String tradeNo) {
        final Function function = new Function(
                "integralRebate", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(integral), 
                new org.web3j.abi.datatypes.generated.Uint256(rate), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> lockedBalanceOf(String _owner) {
        final Function function = new Function("lockedBalanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> integralReturn(String owner, BigInteger integral, BigInteger aiic, BigInteger mj, String tradeNo) {
        final Function function = new Function(
                "integralReturn", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(integral), 
                new org.web3j.abi.datatypes.generated.Uint256(aiic), 
                new org.web3j.abi.datatypes.generated.Uint256(mj), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> limitedTransferLock(String _from, String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "limitedTransferLock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockBalanceFrom(String _owner, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "lockBalanceFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finishMinting() {
        final Function function = new Function(
                "finishMinting", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> lockedTransferFrom(String _from, String _to, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "lockedTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> integralOf(String owner) {
        final Function function = new Function("integralOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferExt(String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "transferExt", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> tradePlatformTransfer(String _from, String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "tradePlatformTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> lockBalanceFromExt(String _from, String _to, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "lockBalanceFromExt", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isAllowed(String _address) {
        final Function function = new Function("isAllowed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> limitedTransferFrom(String _from, String _to, BigInteger _value, String tradeNo) {
        final Function function = new Function(
                "limitedTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(String _to, BigInteger _amount, String tradeNo) {
        final Function function = new Function(
                "mint", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> resetAsset(String owner, BigInteger aiic, BigInteger mj, BigInteger integral, String tradeNo) {
        final Function function = new Function(
                "resetAsset", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(aiic), 
                new org.web3j.abi.datatypes.generated.Uint256(mj), 
                new org.web3j.abi.datatypes.generated.Uint256(integral), 
                new org.web3j.abi.datatypes.Utf8String(tradeNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> initTotalSupply() {
        final Function function = new Function("initTotalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<VRToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, BigInteger _totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalSupply)));
        return deployRemoteCall(VRToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<VRToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol, BigInteger _totalSupply) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(_totalSupply)));
        return deployRemoteCall(VRToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static VRToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static VRToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VRToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class MintEventResponse {
        public Log log;

        public String to;

        public BigInteger amount;

        public String tradeNo;
    }

    public static class MintFinishedEventResponse {
        public Log log;
    }

    public static class IntegralAmplifyEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger amount;

        public BigInteger integral;

        public String tradeNo;
    }

    public static class IntegralLimitedAmplifyEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger amount;

        public BigInteger integral;

        public String tradeNo;
    }

    public static class IntegralRebateEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger integral;

        public BigInteger balance;

        public BigInteger limitedBalance;

        public BigInteger integralOf;

        public String tradeNo;
    }

    public static class IntegralReturnEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger aiicOf;

        public BigInteger mjOf;

        public BigInteger integralOf;

        public String tradeNo;
    }

    public static class ActiveUserEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger activeAmount;

        public BigInteger integralOf;

        public String tradeNo;
    }

    public static class ResetAssetEventResponse {
        public Log log;

        public String optAddress;

        public String targetAddress;

        public BigInteger newAiic;

        public BigInteger newMj;

        public BigInteger newIntegral;

        public String tradeNo;
    }

    public static class TransferFromAmplifyEventResponse {
        public Log log;

        public String targetAddress;

        public BigInteger amount;

        public BigInteger integral;

        public String tradeNo;
    }

    public static class TransferExtEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger balanceOfFrom;

        public BigInteger balanceOfTo;

        public String tradeNo;
    }

    public static class TradePlatformTransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger lockedBalanceOfFrom;

        public BigInteger balanceOfTo;

        public String tradeNo;
    }

    public static class TradePlatformTransferLimitEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger lockedBalanceOfFrom;

        public BigInteger limitBalanceOfTo;

        public String tradeNo;
    }

    public static class LockedBalanceExtEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger balanceOf;

        public BigInteger lockedBalanceOf;

        public String tradeNo;
    }

    public static class LockedTransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger amount;

        public BigInteger lockedBalanceOfFrom;

        public BigInteger lockedBalanceOfTo;

        public String tradeNo;
    }

    public static class LockedBalanceEventResponse {
        public Log log;

        public String _owner;

        public BigInteger amount;

        public BigInteger balanceOf;

        public BigInteger lockedBalanceOf;

        public String tradeNo;
    }

    public static class LockedLimitBalanceEventResponse {
        public Log log;

        public String _owner;

        public BigInteger amount;

        public BigInteger balanceOf;

        public BigInteger limitBalanceOf;

        public String tradeNo;
    }

    public static class UnLockedBalanceEventResponse {
        public Log log;

        public String _owner;

        public BigInteger amount;

        public BigInteger lockedBalanceOf;

        public BigInteger balanceOf;

        public String tradeNo;
    }

    public static class UnLockedBalanceToLimitEventResponse {
        public Log log;

        public String _owner;

        public BigInteger amount;

        public BigInteger lockedBalanceOf;

        public BigInteger limitBalanceOf;

        public String tradeNo;
    }

    public static class LimitedTransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger limitedBalanceOfFrom;

        public BigInteger limitedBalanceOfTo;

        public String tradeNo;
    }

    public static class LimitedTransferLockEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger amount;

        public BigInteger limitedBalanceOfFrom;

        public BigInteger lockBalanceOfTo;

        public String tradeNo;
    }

    public static class AllowedTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;

        public Boolean allow;
    }
}
